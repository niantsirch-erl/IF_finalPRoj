// let enemies = []
// let particles = []

// function init() {
//     player = new Player(x, y, 15, 'white')
//     // projectiles = []
//     // enemies = []
//     // particles = []
//     // score = 0
//     // scoreID.innerHTML = score
//     // updatedScore.innerHTML = score
// }

// function spawnEnemies() {
//     setInterval( () => {
//         const radius = Math.random() * (40 - 5) + 5
//         let x
//         let y 

//         if (Math.random() < 0.5) {
//             x = Math.random() < 0.5 ? 0 - radius : canvas.width + radius
//             y = Math.random() * canvas.height
//         }else{
//             x = Math.random() * canvas.width
//             y = Math.random() < 0.5 ? 0 - radius : canvas.height + radius
//         }
//                         //template leteral
//         const color = `hsl(${Math.random() * 360}, 50%, 50%)`
        
//         const angle = Math.atan2(canvas.height / 2 - y, canvas.width / 2 - x)

//         const velocity = {
//             x: Math.cos(angle),
//             y: Math.sin(angle)
//         }
    

        
//         enemies.push(new Enemy(x, y, radius, color, velocity))

//         // console.log(enemies);   
//     }, 5000)
// }








// for (let index = particles.length - 1; index >= 0; index--) {
    //     const particle = particles[index]
    
    //     if (particle.alpha <= 0) {
    //       particles.splice(index, 1)
    //     } else {
    //       particle.update()
    //     }
    //   }

    // for (let i = frontEndProjectiles.length - 1; i >= 0; i--) {
    //     const frontEndProjectile = frontEndProjectiles[i]

    //     frontEndProjectile.update()
        
    // }

    // frontEndProjectiles.forEach((projectile, index) => {
    //     projectile.update()

    //     // remove projectiles with out of the screen
    //     if (projectile.x + projectile.radius < 0 || projectile.x - projectile.radius > canvas.width || 
    //         projectile.y + projectile.radius < 0 || projectile.y - projectile.radius > canvas.height) {
    //         setTimeout(() => {
    //             projectiles.splice(index, 1)
    //         }, 0)
    //     }
    // })

    // enemies.forEach((enemy, index) => {
    //     enemy.update()

    //     // if collide end game
    //     const dist = Math.hypot(player.x - enemy.x, player.y - enemy.y)
    //     if (dist - enemy.radius - player.radius< 1) {
    //         cancelAnimationFrame(animationID)
    //         modalEl.style.display = 'flex'
    //         updatedScore.innerHTML = score
    //     }

    //     projectiles.forEach((projectile, projIndex) => {
    //         const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y)
            
    //         //when object touch it will remove
    //         if (dist - enemy.radius - projectile.radius< 1) {
                
    //             //particle explosion
    //             for (let i = 0; i < enemy.radius * 2; i++) {
    //                 particles.push(new Particles(
    //                     projectile.x, 
    //                     projectile.y, 
    //                     Math.random() * 2, 
    //                     enemy.color, 
    //                     {
    //                         x: (Math.random() - 0.5) * (Math.random() * 5),
    //                         y: (Math.random() - 0.5) * (Math.random() * 5)
    //                     }
    //                     )) 
    //             }

    //             if (enemy.radius - 10 > 5 ) {
    //                 //scoring
    //                 score += 50
    //                 scoreID.innerHTML = score
    //                 gsap.to(enemy, {
    //                     radius: enemy.radius - 10
    //                 })
    //                 setTimeout(() => {
    //                     projectiles.splice(projIndex, 1)
    //                 }, 0)
    //             }else{
    //                 //if remove althoger
    //                 score += 100
    //                 scoreID.innerHTML = score
    //                 setTimeout(() => {
    //                     enemies.splice(index, 1)
    //                     projectiles.splice(projIndex, 1)
    //                 }, 0)
    //             }
    //         }
    //     })
    // })





    // const velocity = {
    //     x: Math.cos(angle) * 5,
    //     y: Math.sin(angle) * 5 
    // }


    // frontEndProjectiles.push(new Projectile({
    //         x: playerPosition.x,
    //         y: playerPosition.y, 
    //         radius: 5, 
    //         color: 'white', 
    //         velocity
    //     })
    // )



    // startGameBtn.addEventListener('click', () =>{
//     init()
//     animate()
//     spawnEnemies()
//     modalEl.style.display = 'none'
// })